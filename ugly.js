const express=require("express");const app=express();const{engine}=require("express-handlebars");const session=require("express-session");const bcrypt=require("bcryptjs");const mongoose=require("mongoose");const https=require("https");app.use(express.static("public"));require("dotenv").config();const userSchema=new mongoose.Schema({name:String,email:String,age:Number,username:String,password:String,savedShows:[{name:String,overview:String}]});const User=mongoose.model("User",userSchema);app.engine("handlebars",engine({defaultLayout:"main",runtimeOptions:{allowProtoPropertiesByDefault:true,allowProtoMethodsByDefault:true}}));app.set("view engine","handlebars");app.set("views","views");app.use(session({secret:process.env.SESSION_SECRET,resave:false,saveUninitialized:false,cookie:{maxAge:15*60*1e3}}));app.use(express.static("public"));app.use(express.urlencoded({extended:true}));mongoose.connect(process.env.DB_CONNECTION_STRING,{useNewUrlParser:true,useUnifiedTopology:true}).then(()=>{console.log("Connected to the database");app.get("/",(req,res)=>{const errorMessage=req.session.error;req.session.error="";const username=req.session.loggedIn?req.session.username:"";res.render("index",{error:errorMessage,username:username})});app.get("/guest",(req,res)=>{res.render("login",{error:""})});app.get("/quiz",(req,res)=>{res.render("quiz",{error:""})});app.post("/quiz",(req,res)=>{const score=5;res.render("results",{score:score})});const getRandomShowId=()=>{const showIds=[92685,85349,95599,40075,61923,37606,15260,61175,2190,60625];const randomIndex=Math.floor(Math.random()*showIds.length);return showIds[randomIndex]};app.get("/results",(req,res)=>{const showId=getRandomShowId();const apiEndpoint=`https://api.themoviedb.org/3/tv/${showId}?api_key=${process.env.API_KEY}`;https.get(apiEndpoint,apiResponse=>{let data="";apiResponse.on("data",chunk=>{data+=chunk});apiResponse.on("end",()=>{try{const show=JSON.parse(data);const showName=show.name;const showOverview=show.overview;res.send({show:show,showName:showName,showOverview:showOverview})}catch(error){console.error("Error parsing API response:",error);res.status(500).render("error",{error:"Failed to parse API response"})}})}).on("error",error=>{console.error("Error making API request:",error);res.status(500).render("error",{error:"Failed to fetch data from API"})})});app.get("/shows",(req,res)=>{res.render("shows")});app.get("/savedShows",async(req,res)=>{try{if(req.session.loggedIn){const foundUser=await User.findOne({username:req.session.username});if(foundUser){const savedShows=foundUser.savedShows;res.render("savedShows",{username:req.session.username,savedShows:savedShows})}else{res.redirect("/login")}}else{res.redirect("/login")}}catch(err){console.log(err);res.render("savedShows",{username:req.session.username,savedShows:[]})}});app.get("/login",(req,res)=>{const errorMessage=req.session.error;req.session.error="";const username=req.session.loggedIn?req.session.username:"";res.render("login",{error:errorMessage,username:username})});app.get("/signUp",(req,res)=>{if(req.session.loggedIn){res.redirect("/savedShows")}else{res.render("signUp")}});app.post("/signup",(req,res)=>{const{username,password,confirmPassword,name,email,age}=req.body;if(!username){req.session.error="Username is required";res.redirect("/signup");return}if(password!==confirmPassword){req.session.error="Passwords do not match";res.render("signUp",{error:req.session.error});return}bcrypt.hash(password,10,(err,hashedPassword)=>{if(err){console.error("Error hashing password:",err);req.session.error="Failed to create user";res.redirect("/signup");return}const newUser=new User({name:name,email:email,age:age,username:username,password:hashedPassword});newUser.save().then(()=>{req.session.loggedIn=true;req.session.username=username;req.session.save(()=>{res.redirect("/savedShows")})}).catch(error=>{console.error("Error creating user:",error);if(error.code===11e3){req.session.error="Email already in use"}else{req.session.error="Failed to create user"}res.render("signUp",{error:req.session.error})})})});app.post("/login",(req,res)=>{const{username,password}=req.body;User.findOne({username:username}).then(user=>{if(user){bcrypt.compare(password,user.password,(error,result)=>{if(result){req.session.loggedIn=true;req.session.username=username;req.session.save(()=>{res.redirect("/savedShows")})}else{req.session.error="Password or username invalid";res.redirect("/")}})}else{req.session.error="Password or username invalid";res.redirect("/")}}).catch(error=>{console.error("Error finding user:",error);req.session.error="Failed to login";res.redirect("/")})});app.post("/logout",(req,res)=>{req.session.destroy();res.redirect("/")});app.post("/addShow",async(req,res)=>{try{if(req.session.loggedIn){const foundUser=await User.findOne({username:req.session.username});if(foundUser){const showId=getRandomShowId();const apiEndpoint=`https://api.themoviedb.org/3/tv/${showId}?api_key=${process.env.API_KEY}`;https.get(apiEndpoint,async apiRes=>{let data="";apiRes.on("data",chunk=>{data+=chunk});apiRes.on("end",async()=>{const show=JSON.parse(data);const isShowSaved=foundUser.savedShows.some(savedShow=>savedShow.name===show.name&&savedShow.overview===show.overview);console.log("Received name:",show.name);if(isShowSaved){console.log("Show already saved:",show.name);res.redirect("/savedShows")}else{const showData={name:show.name,overview:show.overview};foundUser.savedShows.push(showData);await foundUser.save();console.log("Show saved:",show.name);res.redirect("/savedShows")}})})}else{console.log("User not found");res.redirect("/login")}}else{console.log("User not logged in");res.redirect("/signUp")}}catch(err){console.log(err);res.redirect("/savedShows")}});app.post("/removeShow/:showId",async(req,res)=>{try{if(req.session.loggedIn){const foundUser=await User.findOne({username:req.session.username});if(foundUser){const showId=req.params.showId;const showIndex=foundUser.savedShows.findIndex(savedShow=>savedShow._id==showId);if(showIndex!==-1){foundUser.savedShows.splice(showIndex,1);await foundUser.save();console.log("Show removed with ID:",showId)}else{console.log("Show not found with ID:",showId)}}else{console.log("User not found");res.redirect("/login");return}}else{console.log("User not logged in");res.redirect("/login");return}res.redirect("/savedShows")}catch(err){console.log(err);res.redirect("/savedShows")}});app.post("/deleteAccount",async(req,res)=>{try{if(req.session.loggedIn){const foundUser=await User.findOne({username:req.session.username});if(foundUser){await User.deleteOne({username:req.session.username});console.log("Account deleted:",req.session.username);req.session.destroy();res.redirect("/signUp")}else{console.log("User not found");res.redirect("/login")}}else{console.log("User not logged in");res.redirect("/signUp")}}catch(err){console.log(err);res.redirect("/savedShows")}});app.use((req,res)=>{res.status(404).render("404",{imagePath:"/images/404.png"})});const PORT=process.env.PORT||8e3;app.listen(PORT,()=>{console.log(`Server listening on port ${PORT}`)})}).catch(error=>{console.error("Error connecting to the database:",error)});