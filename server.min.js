const express=require("express"),app=express(),engine=require("express-handlebars")["engine"],session=require("express-session"),bcrypt=require("bcryptjs"),mongoose=require("mongoose"),https=require("https"),userSchema=(app.use(express.static("public")),require("dotenv").config(),new mongoose.Schema({name:String,email:String,age:Number,username:String,password:String,savedShows:[{name:String,overview:String}]})),User=mongoose.model("User",userSchema);app.engine("handlebars",engine({defaultLayout:"main",runtimeOptions:{allowProtoPropertiesByDefault:!0,allowProtoMethodsByDefault:!0}})),app.set("view engine","handlebars"),app.set("views","views"),app.use(session({secret:process.env.SESSION_SECRET,resave:!1,saveUninitialized:!1,cookie:{maxAge:9e5}})),app.use(express.static("public")),app.use(express.urlencoded({extended:!0})),mongoose.connect(process.env.DB_CONNECTION_STRING,{useNewUrlParser:!0,useUnifiedTopology:!0}).then(()=>{console.log("Connected to the database"),app.get("/",(e,s)=>{var r=e.session.error,e=(e.session.error="",e.session.loggedIn?e.session.username:"");s.render("index",{error:r,username:e})}),app.get("/guest",(e,s)=>{s.render("login",{error:""})}),app.get("/quiz",(e,s)=>{s.render("quiz",{error:""})}),app.post("/quiz",(e,s)=>{s.render("results",{score:5})});const r=()=>{var e=[92685,85349,95599,40075,61923,37606,15260,61175,2190,60625];return e[Math.floor(Math.random()*e.length)]},e=(app.get("/results",(e,n)=>{var s=`https://api.themoviedb.org/3/tv/${r()}?api_key=`+process.env.API_KEY;https.get(s,e=>{let o="";e.on("data",e=>{o+=e}),e.on("end",()=>{try{var e=JSON.parse(o),s=e.name,r=e.overview;n.send({show:e,showName:s,showOverview:r})}catch(e){console.error("Error parsing API response:",e),n.status(500).render("error",{error:"Failed to parse API response"})}})}).on("error",e=>{console.error("Error making API request:",e),n.status(500).render("error",{error:"Failed to fetch data from API"})})}),app.get("/shows",(e,s)=>{s.render("shows")}),app.get("/savedShows",async(s,r)=>{try{var e,o;s.session.loggedIn&&(e=await User.findOne({username:s.session.username}))?(o=e.savedShows,r.render("savedShows",{username:s.session.username,savedShows:o})):r.redirect("/login")}catch(e){console.log(e),r.render("savedShows",{username:s.session.username,savedShows:[]})}}),app.get("/login",(e,s)=>{var r=e.session.error,e=(e.session.error="",e.session.loggedIn?e.session.username:"");s.render("login",{error:r,username:e})}),app.get("/signUp",(e,s)=>{e.session.loggedIn?s.redirect("/savedShows"):s.render("signUp")}),app.post("/signup",(r,o)=>{const{username:n,password:e,confirmPassword:s,name:a,email:i,age:t}=r.body;n?e!==s?(r.session.error="Passwords do not match",o.render("signUp",{error:r.session.error})):bcrypt.hash(e,10,(e,s)=>{e?(console.error("Error hashing password:",e),r.session.error="Failed to create user",o.redirect("/signup")):new User({name:a,email:i,age:t,username:n,password:s}).save().then(()=>{r.session.loggedIn=!0,r.session.username=n,r.session.save(()=>{o.redirect("/savedShows")})}).catch(e=>{console.error("Error creating user:",e),11e3===e.code?r.session.error="Email already in use":r.session.error="Failed to create user",o.render("signUp",{error:r.session.error})})}):(r.session.error="Username is required",o.redirect("/signup"))}),app.post("/login",(r,o)=>{const{username:n,password:s}=r.body;User.findOne({username:n}).then(e=>{e?bcrypt.compare(s,e.password,(e,s)=>{s?(r.session.loggedIn=!0,r.session.username=n,r.session.save(()=>{o.redirect("/savedShows")})):(r.session.error="Password or username invalid",o.redirect("/"))}):(r.session.error="Password or username invalid",o.redirect("/"))}).catch(e=>{console.error("Error finding user:",e),r.session.error="Failed to login",o.redirect("/")})}),app.post("/logout",(e,s)=>{e.session.destroy(),s.redirect("/")}),app.post("/addShow",async(e,o)=>{try{if(e.session.loggedIn){const n=await User.findOne({username:e.session.username});var s;n?(s=`https://api.themoviedb.org/3/tv/${r()}?api_key=`+process.env.API_KEY,https.get(s,async e=>{let r="";e.on("data",e=>{r+=e}),e.on("end",async()=>{const s=JSON.parse(r);var e=n.savedShows.some(e=>e.name===s.name&&e.overview===s.overview);console.log("Received name:",s.name),e?console.log("Show already saved:",s.name):(e={name:s.name,overview:s.overview},n.savedShows.push(e),await n.save(),console.log("Show saved:",s.name)),o.redirect("/savedShows")})})):(console.log("User not found"),o.redirect("/login"))}else console.log("User not logged in"),o.redirect("/signUp")}catch(e){console.log(e),o.redirect("/savedShows")}}),app.post("/removeShow/:showId",async(e,s)=>{try{if(e.session.loggedIn){var r=await User.findOne({username:e.session.username});if(r){{const n=e.params.showId;var o=r.savedShows.findIndex(e=>e._id==n);-1!==o?(r.savedShows.splice(o,1),await r.save(),console.log("Show removed with ID:",n)):console.log("Show not found with ID:",n)}s.redirect("/savedShows")}else console.log("User not found"),s.redirect("/login")}else console.log("User not logged in"),s.redirect("/login")}catch(e){console.log(e),s.redirect("/savedShows")}}),app.post("/deleteAccount",async(e,s)=>{try{e.session.loggedIn?await User.findOne({username:e.session.username})?(await User.deleteOne({username:e.session.username}),console.log("Account deleted:",e.session.username),e.session.destroy(),s.redirect("/signUp")):(console.log("User not found"),s.redirect("/login")):(console.log("User not logged in"),s.redirect("/signUp"))}catch(e){console.log(e),s.redirect("/savedShows")}}),app.use((e,s)=>{s.status(404).render("404",{imagePath:"/images/404.png"})}),process.env.PORT||8e3);app.listen(e,()=>{console.log("Server listening on port "+e)})}).catch(e=>{console.error("Error connecting to the database:",e)});